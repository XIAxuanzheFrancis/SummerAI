"use client";

import { Menu } from 'lucide-react';

import { Button } from "@/components/ui/button";
import {Sheet, SheetTrigger, SheetContent} from "@/components/ui/sheet";
import SideBar from "@/components/sidebar";
import { useState, useEffect } from 'react';

const MobileSidebar = () => {
// In this code, the hydration error is resolved by setting an isMounted state using useState and useEffect. Let me explain why the hydration error occurs and why using this approach solves it.

// In a React application, there are often operations that should only be performed on the client side and not on the server side. For example, performing some DOM operations after the component is mounted, or operations that depend on the browser environment. However, when rendering on the server side, there is no browser environment, and these operations can lead to hydration errors. The reason for the hydration error is that the HTML generated by the server-side rendering and the client-side rendering are inconsistent, which causes React to be unable to reuse the server-side rendered HTML in the client-side hydration, resulting in the failure of the hydration.

// A common solution to this problem is to return an empty component during server-side rendering and dynamically load the content during client-side mounting. This ensures that the structure of the HTML generated on the server-side and on the client-side is consistent, thus avoiding hydration errors.

// In the given code, the useState and useEffect are used to set an isMounted state, which is then used to determine whether to return null when the component is rendered; on server-side rendering, null is returned because isMounted is initially set to false, which avoids performing actions on the server that should not be performed. This avoids performing operations on the server side that should not be performed. After the client-side hydration is complete, React will re-render the component, at which point the value of isMounted will have changed to true and the component content will be returned. This ensures that the HTML structure generated on the server side and the client side is the same, thus solving the hydration error.

    const [isMounted, setIsMounted] = useState(false);

    useEffect(() => {
        setIsMounted(true);
    },[]);

    if(!isMounted){
        return null;
    }
    return(
        <>
            <Sheet>
                <SheetTrigger>
                    <Button variant="ghost" size="icon" className="md:hidden">
                        <Menu />
                    </Button>
                </SheetTrigger>
                <SheetContent side="left" className="p-0">
                    <SideBar/>
                </SheetContent>
            </Sheet>
        </>
    );
}

export default MobileSidebar;